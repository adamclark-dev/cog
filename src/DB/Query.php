<?php

namespace Message\Cog\DB;

use Message\Cog\DB\Adapter\ConnectionInterface;
use Message\Cog\DB\Adapter\QueryCountableInterface;

/**
* Query class
*
* Responsible for turning SQL queries into Result datasets.
*/
class Query implements QueryableInterface
{
	protected $_connection;
	protected $_params;
	protected $_query;
	protected $_parsedQuery;
	protected $_queryParser;

	protected $_typeTokens = array(
		's' => 'string',
		'i' => 'integer',
		'f' => 'float',
		'd'	=> 'datetime',
		'b'	=> 'boolean',
	);

	const TOKEN_REGEX = '/((\:[a-zA-Z0-9_\-\.]*)\??([a-z]*)?)|(\?([a-z]*))/us';

	public function __construct(ConnectionInterface $connection, QueryParser $queryParser, $query = null)
	{
		$this->setConnection($connection);
		$this->_query = $query;
		$this->_queryParser = $queryParser;
	}

	/**
	 * Runs a query against the data store
	 *
	 * Params to be interpolated in the query can be passed in via the second
	 * parameter. See readme for more info.
	 *
	 * @param  string $query  The query to run against the datastore.
	 * @param  mixed  $params Parameters to be interpolated in the query.
	 * @throws Exception      Throw exception if query fails
	 *
	 * @return Result         The data generated by the query.
	 */
	public function run($query = null, $params = array())
	{
		if ($query) {
			$this->_query  = $query;
		}
		$this->_params = (array)$params;

		$this->_parsedQuery = $this->_queryParser->parse($this->_query, $this->_params);

		$result = $this->_connection->query($this->_parsedQuery);

		if ($result === false) {
			throw new Exception($this->_connection->getLastError(), $this->_query);
		}

		return new Result($result, clone $this);
	}

	/**
	 * Gets the static count of queries
	 *
	 * @deprecated use connection that implements QueryCountableInterface instead
	 *
	 * @return int
	 */
	public function getQueryCount()
	{
		if ($this->_connection instanceof QueryCountableInterface) {
			return $this->_connection->getQueryCount();
		}

		throw new \LogicException('Cannot count queries from Query object');
	}

	/**
	 * Gets the static list of parsed queries run.
	 *
	 * @deprecated use connection that implements QueryCountableInterface instead
	 *
	 * @return array
	 */
	public function getQueryList()
	{
		if ($this->_connection instanceof QueryCountableInterface) {
			return $this->_connection->getQueryList();
		}

		throw new \LogicException('Cannot list queries from Query object');
	}

	/**
	 * Set the connection to use for this query. Useful if you want to run the
	 * same query against multiple connections.
	 *
	 * @param ConnectionInterface $connection
	 */
	public function setConnection(ConnectionInterface $connection)
	{
		$this->_connection = $connection;
	}

	/**
	 * Get the parsed query in its current state
	 *
	 * @return string       The parsed query
	 */
	public function getParsedQuery()
	{
		return $this->_parsedQuery;
	}

	public function castValue($value, $type, $useNull)
	{
		// check for nullness
		if (is_null($value) && $useNull) {
			return 'NULL';
		}

		if ($value instanceof \DateTime) {
			$value = $value->getTimestamp();
		}

		// If a type is set to date then cast it to an int
		if ($type == 'd') {
		    $safe = (int) $value;
		} else {
			// Don't cast type if type is integer and value starts with @ (as it is an ID variable)
			if (!('i' === $type && '@' === substr($value, 0, 1))) {
				settype($value, $this->_typeTokens[$type]);
			}
			$safe = $this->_connection->escape($value);
		}
		// Floats are quotes to support all locales.
		// See: http://stackoverflow.com/questions/2030684/which-mysql-data-types-should-i-not-be-quoting-during-an-insert"
		if ($type == 's' || $type == 'f') {
			$safe = "'".$safe."'";
		}

		if ('b' === $type) {
			$safe = $value ? 1 : 0;
		}

		return $safe;
	}
}